{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aruns\\\\Desktop\\\\react20\\\\Cinemeye-movie-app-clone-master\\\\src\\\\Row.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); //A snippet of code which runs based on a specific condition/variable\n\n  useEffect(() => {\n    //if [] , run once when the row loads,and dont run it again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //\"https://api.themoviedb.org/3//discover/tv?api_key=${API_KEY}&with_networks=213\"\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  console.log(movies);\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        //https://www.youtube.com/watch?v=XtMThy8QKqU  - we need last code\n        const urlParams = new URLSearchParams(new URL(url).search); //this is to get everything after the ques mark\n\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    //row_posters is inside a container\n    React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, title, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row_posters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, movies.map(movie => /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      onClick: () => handleClick(movie),\n      className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n      src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }))), trailerUrl && /*#__PURE__*/React.createElement(YouTube, {\n      videoId: trailerUrl,\n      opts: opts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 22\n      }\n    }))\n  );\n}\n\nexport default Row;","map":{"version":3,"sources":["C:/Users/aruns/Desktop/react20/Cinemeye-movie-app-clone-master/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","console","log","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","id","poster_path","backdrop_path"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  //A snippet of code which runs based on a specific condition/variable\r\n\r\n  useEffect(() => {\r\n    //if [] , run once when the row loads,and dont run it again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      //\"https://api.themoviedb.org/3//discover/tv?api_key=${API_KEY}&with_networks=213\"\r\n\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  console.log(movies);\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          //https://www.youtube.com/watch?v=XtMThy8QKqU  - we need last code\r\n          const urlParams = new URLSearchParams(new URL(url).search); //this is to get everything after the ques mark\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    //row_posters is inside a container\r\n    <div className=\"row\">\r\n      <h2>{title} </h2>\r\n      <div className=\"row_posters\">\r\n        {/* several row_posters */}\r\n\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}